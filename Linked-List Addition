class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        # Boolean for overflow, i.e. greater than 9
        gten = False   
        
        dummyRoot = ListNode(0)
        ptr = dummyRoot
        
        while (l1) or (l2):
            # Getting the value of node from both linked-list
            if l1:
                v1 = l1.val
                l1 = l1.next
            else:
                v1 = 0 # If first linked-list is finished
            if l2:
                v2 = l2.val
                l2 = l2.next
            else:
                v2= 0 # If second linked-list is finished
            
            s = v1 + v2
            if gten:  # If overflow in previous node
                s+=1
            
            ptr.next = ListNode(s%10)
            ptr = ptr.next
            
            gten = (s>9)    # Check if overflow
            
        
        # If there is still overflow
        if gten:
            ptr.next = ListNode(1) % Add a leading one to the end
            
        return dummyRoot.next 
